name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint
      env:
        NODE_ENV: development

    - name: Type check
      run: npx tsc --noEmit
      env:
        NODE_ENV: development

    - name: Build application
      run: npm run build
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-secret-key-for-ci-build-1234567890' }}
        APP_AWS_REGION: us-east-1
        APP_ACCESS_KEY_ID: fake-key-for-ci
        APP_SECRET_ACCESS_KEY: fake-secret-for-ci
        APP_DYNAMODB_TABLE_NAME: test-submissions
        APP_DYNAMODB_CHURCHES_TABLE: test-churches
        APP_DYNAMODB_USERS_TABLE: test-users
        APP_S3_BUCKET_NAME: test-bucket
        ARYA_AI_API_KEY: fake-ai-key-for-ci
        NODE_ENV: production

    - name: Run tests (if available)
      run: npm test --if-present
      env:
        NODE_ENV: test

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Check for known vulnerabilities
      run: npm run audit
      continue-on-error: true

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Check code formatting
      run: npm run format:check

    - name: Type check
      run: npm run type-check
      env:
        NODE_ENV: development

  deployment-check:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run deployment check
      run: npm run deploy:check
      env:
        JWT_SECRET: test-secret-key-for-deployment-check-1234567890
        APP_AWS_REGION: us-east-1
        APP_ACCESS_KEY_ID: fake-key-for-ci
        APP_SECRET_ACCESS_KEY: fake-secret-for-ci
        APP_DYNAMODB_TABLE_NAME: test-submissions
        APP_DYNAMODB_CHURCHES_TABLE: test-churches
        APP_DYNAMODB_USERS_TABLE: test-users
        APP_S3_BUCKET_NAME: test-bucket
        ARYA_AI_API_KEY: fake-ai-key-for-ci
        NODE_ENV: production

    - name: Run Amplify deployment check
      run: npm run amplify:check

  deploy:
    runs-on: ubuntu-latest
    needs: [deployment-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deployment notification
      run: |
        echo "ðŸš€ Code is ready for deployment!"
        echo "ðŸ“‹ Next steps:"
        echo "  1. AWS Amplify will automatically deploy from main branch"
        echo "  2. Set environment variables in Amplify Console"
        echo "  3. Monitor deployment at: https://console.aws.amazon.com/amplify/"